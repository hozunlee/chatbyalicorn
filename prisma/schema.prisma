// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_POOLING_URL") // uses connection pooling
  directUrl = env("POSTGRES_DIRECT_URL") // uses a direct connection
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  name         String?
  profileImage String?
  session      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 1:1 채팅 관계
  chatRoomsAsUser1 ChatRoom[] @relation("User1")
  chatRoomsAsUser2 ChatRoom[] @relation("User2")
  sentMessages     Message[]
}

model ChatRoom {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastMessageAt DateTime @default(now())
  socketRoomId  String   @unique @default(uuid())

  // 1:1 채팅의 두 참가자
  user1Id Int
  user2Id Int
  user1   User @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2   User @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)

  // 각 사용자별 안 읽은 메시지 카운트
  user1UnreadCount Int @default(0)
  user2UnreadCount Int @default(0)

  // 메시지 관계
  messages Message[]

  // 중복 채팅방 방지
  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@index([lastMessageAt])
}

model Message {
  id         String   @id @default(uuid())
  content    String   @db.Text
  chatRoomId String
  senderId   Int
  createdAt  DateTime @default(now())

  // 읽음 상태 개선
  readStatus      ReadStatus @default(SENT)
  readAt          DateTime? // 읽은 시간
  readByRecipient Boolean    @default(false) // 수신자가 읽었는지 여부

  // 관계
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatRoomId])
  @@index([senderId])
  @@index([createdAt])
  @@index([readStatus])
}

enum ReadStatus {
  SENT // 전송됨
  DELIVERED // 전달됨 (상대방 기기에 도착)
  READ // 읽음
}
